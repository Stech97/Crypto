/*! normalize.scss v0.1.0 | MIT License | based on git.io/normalize */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background:0 0}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font:1em monospace,monospace}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}*,::after,::before{box-sizing:inherit}html{box-sizing:border-box;width:100%;margin:0}body{margin:0;width:100%}@media (min-width:992px){.header-grid-container{padding-left:140px;padding-right:96px}section .wrapper{width:100%;padding-left:140px;padding-right:96px}}img{max-width:100%}a{text-decoration:none}h1,h2,h3{margin:0}button:focus,input:focus,select:focus,textarea:focus{outline:0;background:0 0}input:-webkit-autofill,input:-webkit-autofill:focus input:-webkit-autofill,input:-webkit-autofill:hover,select:-webkit-autofill,select:-webkit-autofill:focus,select:-webkit-autofill:hover,textarea:-webkit-autofill,textarea:-webkit-autofill:hover textarea:-webkit-autofill:focus{border-width:0 0 2px 0;border-bottom-color:#fff;-webkit-text-fill-color:#fff;-webkit-box-shadow:0 0 0 1000px transparent inset;-webkit-transition:background-color 5000s ease-in-out 0s;transition:background-color 5000s ease-in-out 0s;background:-webkit-linear-gradient(top,rgba(255,255,255,0) 0,rgba(0,174,255,.04) 50%,rgba(255,255,255,0) 51%,rgba(0,174,255,.03) 100%)}.header{width:100%;height:11vh}.header-wrapper{background:#fff;display:grid;grid-template-columns:minmax(200px,1fr) 1fr;grid-template-rows:11vh;gap:0 0;grid-template-areas:"top-logo-box top-nav-box";border-bottom-right-radius:5.5vh;border:none}.header-logo{grid-area:top-logo-box;align-self:center;height:50%}.header-logo img{height:100%;-o-object-fit:contain;object-fit:contain}.header-nav{display:grid;grid-template-columns:repeat(4,minmax(134px,1fr)) minmax(220px,2fr);grid-template-rows:1fr;gap:0;grid-template-areas:"nav-about nav-team nav-blog nav-login nav-signup";grid-area:top-nav-box;justify-items:center;align-items:center}.header-nav-signup{grid-area:nav-signup}.header-nav-about{grid-area:nav-about}.header-nav-team{grid-area:nav-team}.header-nav-blog{grid-area:nav-blog}.header-nav-login{grid-area:nav-login}.header-nav-bar a{font:normal 500 1.456vw/1.32 "IBM Plex Sans";font-stretch:normal;letter-spacing:normal;text-align:center;color:#005c9f}.header-nav-signup{align-self:center}.header-nav-signup .button-signup{font:500 1.456vw/1.31 "IBM Plex Sans";background:#fff;width:18.26vh;height:5.5vh;padding:1.1vh 3.8346vh 1.1vh 3.8346vh;border-radius:3.3vh;border:solid 3px #ed7102;text-align:center;color:#ed7102}.header-nav-signup .button-signup:hover{background:#ed7102;color:#fff}.header-nav-signup .button-main-inversed{background:#fff;font-family:"IBM Plex Sans";text-align:center;color:#ed7102}.header-nav-signup .button-main-inversed:hover{background:#ed7102;color:#fff}.signup{position:relative;width:100%;height:89vh;background:url(../img/waveimage.png) center -11vh/78.2% auto no-repeat,linear-gradient(61deg,#001029 4%,#235fc8 98%) left -11vh/100% 100vh no-repeat}.signup-wrapper{height:100%;width:100%;display:grid;margin:0 28.75%;grid-template-columns:42.5%;grid-template-rows:26.25% 52.29% 6.77% 8.02%;grid-template-areas:"signup-header" "signup-form" "signup-signin" "signup-footer";justify-items:center}.signup-header{grid-area:signup-header;align-self:end;padding-bottom:7.8125%}.signup-header h1{font:500 3.12vw "IBM Plex Sans";color:#fff}.signup-form{grid-area:signup-form;width:100%;display:grid;grid-template-rows:25% 25% 20.72% 16.73% 11.95%;grid-template-columns:49% 49%;gap:0 2%;grid-template-areas:"firstname lastname" "email username" "password repeatpassword" "termsagree countrycheck" "signup-button signup-button";justify-items:center;align-items:start}.signup-form input[type=text]{font:500 1.3vw "IBM Plex Sans";width:100%;background:0 0;height:38px;text-align:left;color:#fff;opacity:.5;padding:0 0 10px 0;border-width:0 0 1px 0;border-bottom-color:#fff}.signup-form input[type=text] ::-webkit-input-placeholder{color:#fff;opacity:.5}.signup-form input[type=text] ::-moz-placeholder{color:#fff;opacity:.5}.signup-form input[type=text] :-ms-input-placeholder{color:#fff;opacity:.5}.signup-form input[type=text] ::-ms-input-placeholder{color:#fff;opacity:.5}.signup-form input[type=text] ::placeholder{color:#fff;opacity:.5}.signup-form input[type=text] ::-webkit-input-placeholder{color:#fff;opacity:.5}.signup-form input[type=checkbox]{height:1.5625vw;width:1.5625vw;border:3px solid #f5fbff;background:0 0}.signup-form-firstname{grid-area:firstname;width:100%}.signup-form-lastname{grid-area:lastname;width:100%}.signup-form-email{grid-area:email;width:100%}.signup-form-username{grid-area:username;width:100%}.signup-form-password{grid-area:password;width:100%}.signup-form-repeatpassword{grid-area:repeatpassword;width:100%}.signup-form-termsagree{grid-area:termsagree;width:100%}.signup-form-countrycheck{grid-area:countrycheck;width:100%}.signup-form-countrycheck span,.signup-form-termsagree span{font:500 1.04vw/50px "IBM Plex Sans";color:#fff}.signup-form-countrycheck span a,.signup-form-termsagree span a{text-decoration:underline}.signup-form-button{font:500 1.3vw/1.31 "IBM Plex Sans";background:#ed7102;grid-area:signup-button;width:220px;height:3.125vw;padding:.625vw 46.2px .625vw 46.2px;border-radius:1.875vw;border:solid 3px #ed7102;text-align:center;color:#fff;margin-top:36.5px}.signup-form-button:hover{background:inherit;color:#ed7102}.signup-signin{grid-area:signup-signin}.signup-signin p{font:400 1.04vw/50px "IBM Plex Sans";color:#fff}.signup-signin p a{color:#fff;font-family:"IBM Plex Sans";font-weight:700;text-decoration:underline}.signup .sign-footer{grid-area:signup-footer;max-height:77px;height:8.3vh;align-self:center}.signup .sign-footer a{font:400 1.04vw/50px "IBM Plex Sans";color:#fff;margin:8px}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
