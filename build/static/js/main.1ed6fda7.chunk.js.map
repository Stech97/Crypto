{"version":3,"sources":["reducers/comingsoon.js","actions/ComingsoonForm.js","reducers/index.js","store/configureStore.js","components/ComingsoonForm.js","Comingsoon.js","serviceWorker.js","index.js"],"names":["initialState","visibility","placeholder","formReducer","state","action","type","payload","rootReducer","combineReducers","form","reduxFormReducer","ComingSoon","store","createStore","applyMiddleware","thunk","logger","renderField","input","className","ComingSoonForm","templateId","variables","this","props","handleSubmit","submitting","sendError","onSubmit","values","message_html","email","emailjs","send","then","res","console","log","dispatch","catch","err","error","Field","component","name","disabled","Component","reduxForm","ComingSoonLogo","src","alt","ComingSoonH1","updateViewSuccess","connect","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1ed6fda7.chunk.js","sourcesContent":["import { COMINGSOON_ERROR, COMINGSOON_SUCCESS } from '../actions/ComingsoonForm'\n\nexport const initialState = {\n\tvisibility: true,\n    placeholder: \"maxmustter@hotmail.com\"\n}\n\nexport const formReducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase COMINGSOON_ERROR:\n\t\t\treturn { ...state, visibility: action.payload, placeholder: action.placeholder }\n\n\t\tcase COMINGSOON_SUCCESS:\n\t\t\treturn { ...state, visibility: action.payload, placeholder: action.placeholder }\n\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport default formReducer","export const COMINGSOON_ERROR = 'COMINGSOON_ERROR'\nexport const COMINGSOON_SUCCESS = 'COMINGSOON_SUCCESS'\t\t\n\nexport function updateViewSuccess() {\n\treturn (dispatch) => {\n\t\tdispatch({\n\t\t\ttype: COMINGSOON_SUCCESS,\n\t\t\tpayload: false,\n\t\t\tplaceholder: \"maxmustter@hotmail.com\",\n\t\t})\n\t}\n}\nexport function updateViewError() {\n\treturn (dispatch) => {\n        dispatch({\n           \ttype: COMINGSOON_ERROR,\n           \tpayload: true,\n\t\t\tplaceholder: \"Wrong email. Please try again.\",\n        })\n\t}\n}","import { combineReducers } from 'redux';\nimport { reducer as reduxFormReducer } from 'redux-form';\nimport { formReducer } from './comingsoon'\n\nexport const rootReducer = combineReducers({\n  form: reduxFormReducer, // mounted under \"form\"\n  ComingSoon: formReducer,\n})\n","import { createStore, applyMiddleware } from 'redux'\nimport { rootReducer } from '../reducers'\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger))","import React, { Component } from 'react'\nimport { reduxForm, Field } from 'redux-form';\nimport { updateViewSuccess, updateViewError } from '../actions/ComingsoonForm'\nimport emailjs from 'emailjs-com'\n\n\nconst renderField = ({ input, placeholder, className, type }) => {\n\treturn (\n \t\t<input {...input} className={className} placeholder={placeholder} type={type} />\n\t)\n}\n\nclass ComingSoonForm extends Component {\n\n\tsendFeedback (templateId, variables) {\n\t\t\n\t}\n\n\trender() {\t\t\n\t\tconst templateId = 'test'\n\t\tconst { handleSubmit, submitting, sendError, placeholder} = this.props\n        const submit = (values) => {\n        \t/*\n        \twindow.alert(JSON.stringify({\n\t\t\t\tmethod: 'post',\n\t\t\t\theaders: {\n                \t'Content-Type': 'application/json',\n            \t},\n\t\t\t\tbody: JSON.stringify({ Email : 'test' + values.email })\n\t\t\t}))\n\t\t\t*/\n\t\t\t/*\n\t\t\tfetch(\"http://10.0.0.50/api/Email/AddEmail\", {\n\t\t\t\tmethod: 'post',\n\t\t\t\theaders: {\n                \t'Content-Type': 'application/json',\n            \t},\n\t\t\t\tbody: JSON.stringify({ Email : 'test' + values.email })\n\t\t\t}).then(function(response) {\n\t\t\t\tif (response.ok) {\n\t                alert('Успех!')\t\t\t\n\t            } else {\n\t                alert(response.e)\n\t            }\n\t        }).catch((ex) => {\n\t    \t\talert('Ъуъ')\n\t        })\n\t        */\n\t        let variables = {message_html: values.email};\n\t\t\temailjs.send(\n\t\t\t  \t'gmail', templateId,\n\t\t\t  \tvariables, 'user_jIExVfMX1Oha7HaXMmsBs'\n\t\t  \t).then(res => {\n\t\t    \tconsole.log('Email successfully sent!')\n\t\t\t\tthis.props.dispatch(updateViewSuccess())\n\t\t  \t})\n\t\t  \t// Handle errors here however you like, or use a React error boundary\n\t\t  \t.catch(err => {\n\t\t  \t\tconsole.error('Oh well, you failed. Here some thoughts on the error that occured:', err)\n\t\t\t\tthis.props.dispatch(updateViewError())\n\t\t\t})\n\t\t}\n\n\t\treturn (\n\t\t    <form\n\t\t    \tclassName={ sendError ? \"comingsoon-form-box\" : \"none\" }\n\t\t    \tonSubmit={handleSubmit(submit)}\n\t\t    >\n\t\t        <Field\n\t\t          component={renderField}\n\t\t          name=\"email\"\n\t\t          className=\"commingsoon-input-text\"\n\t\t          type=\"email\"\n\t\t          placeholder={placeholder}\n\t\t        />\n\t\t        <button\n\t\t        \ttype=\"submit\"\n\t\t        \tdisabled={submitting}\n\t\t        \tclassName=\"comingsoon-input-button\"\n\t\t    \t>Notify Me</button>\n\t      \t</form>\n\t\t)\n\t}\n}\n\nexport default reduxForm({\n  form: 'TESTFORM' // a unique identifier for this form\n})(ComingSoonForm)","import React, { Component } from 'react'\nimport './styles/comingsoon.scss'\nimport { connect } from 'react-redux'\nimport ComingSoonForm from './components/ComingsoonForm'\n\nconst ComingSoonLogo = () => {\n\treturn (\n\t\t<div className=\"comingsoon-logobox\">\n\t        <img src=\"img/defimaLogo.png\" alt=\"defimaLogo\" />\n\t    </div>\n\t)\n}\n\nconst ComingSoonH1 = () => {\n\treturn (\n\t\t<div className=\"comingsoon-h1-box\">\n\t        <h1>We Will Launch Soon.</h1>\n\t    </div>\n\t)\n}\n\nclass ComingSoon extends Component {\n\n\trender () {\n\t\tconst { ComingSoon } = this.props\n\t\tconsole.log(ComingSoon.visibility)\n\t\treturn (\n\t\t\t<section className=\"comingsoon\">\n\t\t\t\t<div className=\"comingsoon-wrapper\">\n\t\t\t\t    <div className=\"comingsoon-grid-container\">\n\t\t\t\t\t    <ComingSoonLogo />\n\t\t\t\t\t    <ComingSoonH1 />\n\t\t\t\t\t    <div className={ ComingSoon.visibility ? \"comingsoon-h2-box\" : \"none\"}>\n\t\t\t\t\t        <h2>Subscribe to get notification as soon as we launch.</h2>\n\t\t\t\t\t    </div>\n\t\t\t\t\t    <ComingSoonForm updateViewSuccess={ComingSoon.updateViewSuccess} sendError={ComingSoon.visibility} placeholder={ComingSoon.placeholder}/>\n\t\t\t            <div className={ !ComingSoon.visibility ? \"comingsoon-thanks-box\" : \"none\" }>\n\t\t\t                <p>Thank you for your subscription.</p>\n\t\t\t            </div>\n\t\t\t\t    </div>\n\t\t\t  \t</div>\n\t\t\t</section>\n\t\t)\n\t}\t\n}\n\n\nconst mapStateToProps = store => {\n\tconsole.log(store)\n  return {\n    ComingSoon: store.ComingSoon\n  }\n}\n/*\nconst mapDispatchToProps = dispatch => {\n  return {\n  \tupdateViewError: dispatch(updateViewError()),\n    updateViewSuccess: dispatch(updateViewSuccess()),\n  }\n}\n*/\nexport default connect(\n\tmapStateToProps\n)(ComingSoon)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { store } from './store/configureStore'\nimport ComingSoon from './Comingsoon';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<ComingSoon />\n\t</Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}